import tensorflow as tf
import numpy as np

# Define XOR data
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
outputs = np.array([[0], [1], [1], [0]])

# Define the neural network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(2, input_shape=(2,), activation='sigmoid'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(inputs, outputs, epochs=1000, verbose=0)

# Evaluate the trained model
loss, accuracy = model.evaluate(inputs, outputs)
print(f"Loss: {loss}, Accuracy: {accuracy}")

# Predict using the trained model
predictions = model.predict(inputs)
print("\nPredictions:")
for i in range(len(inputs)):
    print(f"Input: {inputs[i]}, Predicted Output: {predictions[i][0]}")
