#pip install adversarial-robustness-toolbox


import numpy as np
import matplotlib.pyplot as plt
from keras.applications.resnet50 import ResNet50, decode_predictions, preprocess_input
from keras.preprocessing import image
from art.attacks.evasion import FastGradientMethod
from art.estimators.classification import KerasClassifier
import tensorflow as tf

# Disable TensorFlow eager execution
tf.compat.v1.disable_eager_execution()

# Load pre-trained ResNet50 model
model = ResNet50(weights='imagenet')

# Load and preprocess the image
img_path = './example_image.jpeg'  # Path to your example image
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

# Create KerasClassifier wrapper for ART
classifier = KerasClassifier(model=model, clip_values=(0, 255))

# Predict the class of the original image
pred_class = classifier.predict(x)
pred_class_index = np.argmax(pred_class, axis=1)[0]
print("Predicted class of original image:", decode_predictions(pred_class, top=1)[0][0][1])

# Generate adversarial examples using Fast Gradient Sign Method (FGSM)
attack = FastGradientMethod(estimator=classifier, eps=0.05)
x_adv = attack.generate(x)

# Predict the class of the adversarial example
pred_class_adv = classifier.predict(x_adv)
pred_class_adv_index = np.argmax(pred_class_adv, axis=1)[0]
print("Predicted class of adversarial example:", decode_predictions(pred_class_adv, top=1)[0][0][1])

# Display original and adversarial images
plt.figure()
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(img)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Adversarial Image')
plt.imshow(x_adv[0].astype(np.uint8))
plt.axis('off')

plt.show()
